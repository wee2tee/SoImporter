<#@ template language="C#" #>
<#@ output extension="cs" #>
//  Copyright 2010  Ekon Benefits
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

using System;
using System.Linq;

namespace ImpromptuInterface.Dynamic
{

    /// <summary>
    /// Fluent Class for writing inline lambdass
    /// </summary>
    /// <typeparam name="TR">The type of the R.</typeparam>
    public static class Return<TR>
    {
		
		/// <summary>
        /// Arguments
        /// </summary>
        /// <param name="del">The lambda.</param>
        /// <returns>The lambda.</returns>
        public static Func<TR> Arguments(Func<TR> del)
        {
            return del;
        }


        /// <summary>
        /// This and arguments.
        /// </summary>
        /// <param name="del">The del.</param>
        /// <returns></returns>
        public static ThisFunc<TR> ThisAndArguments(ThisFunc<TR> del)
        {
            return del;
        }

		<#for(int i=1; i<=16;i++){ #>

		<#
			var tFuncTArgs ="T1";
			for(int j=2;j<=i;j++){ 
				tFuncTArgs +=String.Format(",T{0}",j);
			}

		#>


        /// <summary>
        /// Arguments 
        /// </summary>
<# for(int j=1;j<=i;j++){ #>
		/// <typeparam name="T<#=j#>">The type of the Argument <#=j#>.</typeparam>
<# } #>
        /// <param name="del">The lambdas.</param>
        /// <returns></returns>
        public static Func<<#=tFuncTArgs#>,TR> Arguments<<# Write(tFuncTArgs); #>>(Func<<#=tFuncTArgs#>,TR> del)
        {
            return del;
        }

        /// <summary>
        /// this and Arguments.
        /// </summary>
<# for(int j=1;j<=i;j++){ #>
		/// <typeparam name="T<#=j#>">The type of the Argument <#=j#>.</typeparam>
<# } #>
        /// <param name="del">The del.</param>
        /// <returns></returns>
        public static ThisFunc<TR,<#=tFuncTArgs#>> ThisAndArguments<<# Write(tFuncTArgs); #>>(ThisFunc<TR,<#=tFuncTArgs#>> del)
        {
            return del;
        }

     <# } #>
	}


	/// <summary>
    /// Fluent class for writing inline lambdas that return void
    /// </summary>
	public static class ReturnVoid
    { 
	    /// <summary>
        /// Arguments
        /// </summary>
        /// <param name="del">The lambda.</param>
        /// <returns>The lambda.</returns>
        public static Action Arguments(Action del)
        {
            return del;
        }


        /// <summary>
        /// This and arguments.
        /// </summary>
        /// <param name="del">The del.</param>
        /// <returns></returns>
        public static ThisAction ThisAndArguments(ThisAction del)
        {
            return del;
        }


		<#for(int i=1; i<=16;i++){ #>

		<#
			var tFuncTArgs ="T1";
			for(int j=2;j<=i;j++){ 
				tFuncTArgs +=String.Format(",T{0}",j);
			}

		#>

        /// <summary>
        /// Arguments
        /// </summary>
<# for(int j=1;j<=i;j++){ #>
		/// <typeparam name="T<#=j#>">The type of the Argument <#=j#>.</typeparam>
<# } #>
        /// <param name="del">The lambda.</param>
        /// <returns>The lambda.</returns>
		 public static Action<<#=tFuncTArgs#>> Arguments<<#=tFuncTArgs#>>(Action<<#=tFuncTArgs#>> del)
        {
            return del;
        }


         /// <summary>
         /// This and Arguments.
         /// </summary>
<# for(int j=1;j<=i;j++){ #>
		/// <typeparam name="T<#=j#>">The type of the Argument <#=j#>.</typeparam>
<# } #>
         /// <param name="del">The del.</param>
         /// <returns></returns>
         public static ThisAction<<#=tFuncTArgs#>> ThisAndArguments<<#=tFuncTArgs#>>(ThisAction<<#=tFuncTArgs#>> del)
         {
             return del;
         }

		 <# } #>
     }
}

