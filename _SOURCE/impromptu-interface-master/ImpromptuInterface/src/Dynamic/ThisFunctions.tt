<#@ template language="C#" #>
<#@ output extension="cs" #>
<#@ assembly  name="System.Core" #>
<#@ import namespace="System.Linq" #>

//  Copyright 2010  Ekon Benefits
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

using System;
using System.Collections.Generic;

namespace ImpromptuInterface.Dynamic
{
    /// <summary>
    /// Special Delegate used to make impromptu object methods first parameter is this.
    /// </summary>
	public delegate void ThisAction(dynamic @this);
<# for(int i=1; i<=16; i++){
	var tArgs = String.Concat(Enumerable.Range(2,i-1).Select(it=>String.Format(",in T{0}",it)));
	var tParms = String.Concat(Enumerable.Range(1,i).Select(it=>String.Format(",T{0} arg{0}",it)));
#>
    /// <summary>
    /// Special Delegate used to make impromptu object methods first parameter is this.
    /// </summary>
	public delegate void ThisAction<in T1<#=tArgs#>>(dynamic @this<#=tParms#>);
<# } #>
    /// <summary>
    /// Special Delegate used to make impromptu object methods first parameter is this.
    /// </summary>
	public delegate TResult ThisFunc<out TResult>(dynamic @this);
<# for(int i=1; i<=16; i++){
	var tArgs = String.Concat(Enumerable.Range(2,i-1).Select(it=>String.Format(",in T{0}",it)));
	var tParms = String.Concat(Enumerable.Range(1,i).Select(it=>String.Format(",T{0} arg{0}",it)));
#>
    /// <summary>
    /// Special Delegate used to make impromptu object methods first parameter is this.
    /// </summary>
	public delegate TResult ThisFunc<in T1<#=tArgs#>, out TResult>(dynamic @this<#=tParms#>);
<# } #>
	
	/// <summary>
    /// Extension method for Dealing with Special Delegate Type
    /// </summary>
	public static class ThisDelegate{
		private static readonly HashSet<Type> _specialThisDels = new HashSet<Type>(){
				typeof(ThisAction),
				typeof(ThisFunc<>),
<# for(int i=1; i<=16; i++){
		var tCommas = String.Concat(Enumerable.Repeat(",",i));
#>
<# if(i!=16){#>			
				typeof(ThisAction<<#=tCommas#>>),
<# } #>
				typeof(ThisFunc<<#=tCommas#>>),
<# } #>
		};

		/// <summary>
        /// Determines whether [is special this delegate] [the specified del].
        /// </summary>
        /// <param name="del">The del.</param>
        /// <returns>
        /// 	<c>true</c> if [is special this delegate] [the specified del]; otherwise, <c>false</c>.
        /// </returns>
		public static bool IsSpecialThisDelegate(this Delegate del){
				var tType =del.GetType();
				if(!tType.IsGenericType) return false;
				var tGenDel =del.GetType().GetGenericTypeDefinition();
				var tReturn =_specialThisDels.Contains(tGenDel);
				return tReturn;

		}
	}
}
