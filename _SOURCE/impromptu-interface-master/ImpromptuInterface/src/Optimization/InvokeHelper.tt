<#@ template language="C#" #>
<#@ output extension="cs" #>
<#@ assembly  name="System.Core" #>
<#@ import namespace="System.Linq" #>

// 
//  Copyright 2011 Ekon Benefits
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using ImpromptuInterface.Build;
using System.Reflection;

namespace ImpromptuInterface.Optimization
{
  

    internal static partial class InvokeHelper
    {


        internal static readonly Type[] FuncKinds;
        internal static readonly Type[] ActionKinds;
		internal static readonly IDictionary<Type,int> FuncArgs;
		internal static readonly IDictionary<Type,int> ActionArgs;

        static InvokeHelper()
        {
            FuncKinds = new []
                            {
<# for(int i=0; i <= 16; i++){ 
	var tCommas = String.Concat(Enumerable.Repeat(",",i));
#>
								typeof(Func<<#=tCommas#>>), //<#=i#>
<# } #>
                            };

            ActionKinds = new []
                            {
                                typeof(Action), //0
<# for(int i=1; i <= 16; i++){ 
	var tCommas = String.Concat(Enumerable.Repeat(",",i-1));
#>
								typeof(Action<<#=tCommas#>>), //<#=i#>
<# } #>
                            };


			FuncArgs = FuncKinds.Zip(Enumerable.Range(0, FuncKinds.Length), (key, value) => new { key, value }).ToDictionary(k => k.key, v => v.value);
            ActionArgs = ActionKinds.Zip(Enumerable.Range(0, ActionKinds.Length), (key, value) => new { key, value }).ToDictionary(k => k.key, v => v.value);

        }




        internal static void InvokeMemberAction(ref CallSite callsite,
		                                            Type binderType,
													int knownType,
													LazyBinder binder,
                                                    String_OR_InvokeMemberName name,
													bool staticContext,
                                                    Type context, 
                                                    string[] argNames,
                                                    object target,
                                                    params object [] args)
        {

            var tSwitch = args.Length;
            switch (tSwitch)
            {
#region Optimizations
<# for(int i=0; i <= 14; i++){ 
		var tobjectArgs = String.Join(",",Enumerable.Repeat(" object",i+1));
		var tArrayArgs = String.Concat(Enumerable.Range(0,i).Select(it=>String.Format(", args[{0}]",it)));
#>
                case <#=i#>:
                    {
						var tCallSite = (CallSite<Action<CallSite, <#=tobjectArgs#>>>)callsite;
						if(tCallSite == null){
							tCallSite = CreateCallSite<Action<CallSite, <#=tobjectArgs#>>>(binderType,knownType, binder, name, context, argNames, staticContext);
						    callsite=tCallSite;
						}
                        tCallSite.Target(tCallSite, target<#=tArrayArgs#>);
                        break;
                    }
<# } #>
#endregion
                default:
                    var tArgTypes = Enumerable.Repeat(typeof(object), tSwitch);
                    var tDelagateType = BuildProxy.GenerateCallSiteFuncType(tArgTypes, typeof(void));
                    Impromptu.InvokeCallSite(CreateCallSite(tDelagateType, binderType,knownType, binder, name, context, argNames), target, args);
                    break;

            }
        }

        

       

	




        internal static TReturn InvokeMemberTargetType<TTarget,TReturn>(
										ref CallSite callsite,
										Type binderType,
										int knownType,
										LazyBinder binder,
                                       String_OR_InvokeMemberName name,
									 bool staticContext,
                                     Type context,
                                     string[] argNames,
                                     TTarget target, params object [] args)
        {

        

            var tSwitch = args.Length;

            switch (tSwitch)
            {
#region Optimizations
<# for(int i=0; i <= 14; i++){ 
		var tobjectArgs = String.Join(",",Enumerable.Repeat(" object",i).Concat(new[]{"TReturn"}));
		var tArrayArgs = String.Concat(Enumerable.Range(0,i).Select(it=>String.Format(", args[{0}]",it)));
#>
                case <#=i#>:
                    {
					    var tCallSite = (CallSite<Func<CallSite, TTarget, <#=tobjectArgs#>>>)callsite;
					    if(tCallSite==null){
							 tCallSite = CreateCallSite<Func<CallSite, TTarget, <#=tobjectArgs#>>>(binderType,knownType,binder, name, context, argNames, staticContext);
							 callsite =tCallSite;
						}
                        return tCallSite.Target(tCallSite, target<#=tArrayArgs#>);
                    }
<# } #>
#endregion
                default:
                    var tArgTypes = Enumerable.Repeat(typeof(object), tSwitch);
                    var tDelagateType = BuildProxy.GenerateCallSiteFuncType(tArgTypes, typeof(TTarget));
                    return Impromptu.InvokeCallSite(CreateCallSite(tDelagateType, binderType,knownType, binder, name, context, argNames), target, args);

            }
        }

     




		#if !__MonoCS__
		internal static Delegate WrapFuncHelper<TReturn>(dynamic invokable, int length)
        {
			 switch(length){
#region Optimizations
			 <# for(int i=0; i <= 16; i++){ 
				var tobjectArgs = String.Join(",",Enumerable.Repeat(" object",i).Concat(new[]{" TReturn"}));
  				var tArgList = String.Join(",",Enumerable.Range(0,i).Select(it=>"a"+(it+1)));
#>  					case <#=i#>:
						return new Func<<#=tobjectArgs#>>((<#=tArgList#>)=> invokable(<#=tArgList#>));
<# } #>
#endregion	
				default:
					return new DynamicFunc<TReturn>(args=>(TReturn)Impromptu.Invoke((object)invokable,args));
			}
        }
		#endif

		internal static class MonoConvertCallSite<T>{
			internal static CallSite CallSite;
		}
	    
		internal static Delegate WrapFuncHelperMono<TReturn>(dynamic invokable, int length)
        {
			 switch(length){
#region Optimizations
			 <# for(int i=0; i <= 16; i++){ 
				var tobjectArgs = String.Join(",",Enumerable.Repeat(" object",i).Concat(new[]{" TReturn"}));
  				var tArgList = String.Join(",",Enumerable.Range(0,i).Select(it=>"a"+(it+1)));
#>  					case <#=i#>:
						return new Func<<#=tobjectArgs#>>((<#=tArgList#>)=>{
								 object tResult= invokable(<#=tArgList#>);
						         return (TReturn) InvokeConvertCallSite(tResult, true, typeof(TReturn), typeof(object), ref MonoConvertCallSite<TReturn>.CallSite);
						 });
<# } #>
#endregion		
				default:
						return new DynamicFunc<TReturn>(args=>{
								object tResult= Impromptu.Invoke((object)invokable,args);
								return (TReturn) InvokeConvertCallSite(tResult, true, typeof(TReturn), typeof(object), ref MonoConvertCallSite<TReturn>.CallSite);
						});
			}
        }


        internal static Delegate WrapAction(dynamic invokable, int length)
        {
           	 switch(length){
#region Optimizations
				    case 0:
					    return new Action(()=>invokable());
<# for(int i=1; i <= 16; i++){ 
				var tobjectArgs = String.Join(",",Enumerable.Repeat(" object",i));
				var tArgList = String.Join(",",Enumerable.Range(0,i).Select(it=>"a"+(it+1)));
#>  					case <#=i#>:
						return new Action<<#=tobjectArgs#>>((<#=tArgList#>)=> invokable(<#=tArgList#>));
<# } #>
#endregion		
				default:
					return new DynamicAction(args=>Impromptu.InvokeAction((object)invokable,args));
			}
        }


        internal static object FastDynamicInvokeReturn(Delegate del, dynamic [] args)
        {
            dynamic tDel =del;
            switch(args.Length){
                default:
                    try
                    {
                        return del.DynamicInvoke(args);
                    }
                    catch (TargetInvocationException ex)
                    {
                        throw ex.InnerException;
                    }
#region Optimization
<# for(int i=1; i <= 16; i++){ 
	var tArgs = String.Join(",",Enumerable.Range(0,i).Select(it=>String.Format("args[{0}]",it)));
#>				case <#=i#>:
                    return tDel(<#= tArgs #>);
<# } #>
#endregion
            }
        }

        internal static void FastDynamicInvokeAction(Delegate del, params dynamic [] args)
        {
            dynamic tDel =del;
            switch(args.Length){
                default: 
					try
                    {
						del.DynamicInvoke(args);
					}
					catch (TargetInvocationException ex)
                    {
                        throw ex.InnerException;
                    }
                    return;
#region Optimization
<# for(int i=1; i <= 16; i++){ 
	var tArgs = String.Join(",",Enumerable.Range(0,i).Select(it=>String.Format("args[{0}]",it)));
#>				case <#=i#>:
                    tDel(<#= tArgs #>);
                    return;
<# } #>
#endregion
            }
        }
    }
}
